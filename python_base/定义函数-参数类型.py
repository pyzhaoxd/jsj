def test(n):
    '''test funciton'''
    while n < 5:
        print("num is lt 5" )
        return n
        break
    else:
        print("num is gt 5")

# test(4)

#关键字 def 引入了一个函数 定义。在其后必须跟有函数名和包括形式参数的圆括号。函数体语句从下一行开始，必须是缩进的。
#函数 调用 会为函数局部变量生成一个新的符号表。确切的说，所有函数中的变量赋值都是将值存储在局部符号表。
# 变量引用首先在局部符号表中查找，然后是包含函数的局部符号表，然后是全局符号表，最后是内置名字表。
# 因此，全局变量不能在函数中直接赋值（除非用 global 语句命名），尽管他们可以被引用。

#一个函数定义会在当前符号表内引入函数名。函数名指代的值（即函数体）有一个被 Python
# 解释器认定为 用户自定义函数 的类型。 这个值可以赋予其他的名字（即变量名），然后它也可以被当做函数使用
# 这可以作为通用的重命名机制:

# a = test
# print(a(4))

#如果你使用过其他语言，你可能会反对说：fib 不是一个函数，而是一个方法，因为它并不返回任何值。
# 事实上，没有 return 语句的函数确实会返回一个值，虽然是一个相当令人厌烦的值（指 None ）。
# 这个值被称为 None （这是一个内建名称）。如果 None 值是唯一被书写的值，
# 那么在写的时候通常会被解释器忽略（即不输出任何内容）。如果你确实想看到这个值的输出内容，请使用

def test1(n):
    '''test funciton'''
    result = []
    while n < 5:
        result.append(n)
        print("num is lt 5")
        return result

    else:
        print("num is gt 5")
        return result


b = test1(4)
print(b)